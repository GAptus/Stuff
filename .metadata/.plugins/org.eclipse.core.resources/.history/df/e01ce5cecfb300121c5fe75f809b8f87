
import java.io.UnsupportedEncodingException;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.MessagingException;
import java.util.Date;
import javax.swing.*;

public class ObservedEmail {
	
	Date myDate = new Date();
	
	public void sentEmail(String recipient, String body, String email) throws PlayerNotFoundException, UnsupportedEncodingException {
		

		
		Properties propsTLS = new Properties();
		
		propsTLS.put("mail.transport.protocol", "smtp");
		propsTLS.put("mail.smtp.host", "smtp.gmail.com");
		propsTLS.put("mail.smtp.auth", "true");
		propsTLS.put("mail.smtp.starttls.enable", "true");
		
		
		Session sessionTLS = Session.getInstance(propsTLS);
		
		sessionTLS.setDebug(true);
		
		
		String password = JOptionPane.showInputDialog("Enter password");
		
//		JPanel panel = new JPanel();
//		JLabel label = new JLabel("Enter a password");
//		JPasswordField pass = new JPasswordField(15);
//		panel.add(label);
//		panel.add(pass);
//		
//		String[] options = {"OK", "Cancel"};
//		
//		String password = null;
//		int option = JOptionPane.showOptionDialog(null, panel, "The title", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[1]);
//		
//		if (option == 0) {
//			char[] passwordStorage = pass.getPassword();
//			password = new String(passwordStorage);
//		}
		
		Message messageTLS = new MimeMessage(sessionTLS);
		
		try {
			messageTLS.setFrom(new InternetAddress("aptuspool@gmail.com", "Pool League"));
			
			
			messageTLS.setRecipient(Message.RecipientType.TO, new InternetAddress(player.getEmail()));
			
			messageTLS.setSubject("Pool League!!!!!");
			
			messageTLS.setText(myDate.toString() + " : " + body);
			
			Transport transportTLS = sessionTLS.getTransport();
			
			transportTLS.connect("smtp.gmail.com", 587, "giacomo@aptusinteractive.com", password);
			
			transportTLS.send(messageTLS);
			
			transportTLS.close();
		}
		catch(MessagingException e) {
			throw new RuntimeException(e);
		}
		
		
	}
}
